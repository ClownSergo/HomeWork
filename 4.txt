#include <iostream>
#include <omp.h>
#include <ctime>
#include <vector>

using namespace std;

const int array_size = 400;
vector<vector<int>> a, b, c;

void OmpFun(vector<vector<int>> m, vector<vector<int>> n, vector<vector<int>> p) {
#pragma omp parallel for shared(m, n, p)
	for (int i = 0; i < array_size; ++i) {
		for (int j = 0; j < array_size; ++j) {
			for (int k = 0; k < array_size; ++k) 
				p[i][j] += m[i][k] * n[k][j];
		}
	}
}

int main() {
	srand(time(nullptr));
	a.resize(array_size);
	b.resize(array_size);
	c.resize(array_size);
	for (int i = 0; i < array_size; ++i) {
		a[i].resize(array_size);
		b[i].resize(array_size);
		c[i].resize(array_size);
		for (int j = 0; j < array_size; ++j) {
			a[i][j] = rand();
			b[i][j] = rand();
			c[i][j] = 0;
		}
	}

	omp_set_num_threads(10);
	auto start = clock();
	OmpFun(a, b, c);
	auto end = clock();
	cout << "Time: " << (end - start) / 1000.0 << endl;
	return 0;
}